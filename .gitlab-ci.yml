stages:
  - test

run-tests:
  stage: test
  # Use the golang image for this job
  image: golang
  needs: []
  # The tags a GitLab runner must have in order to run this job
  # This allows us to define which runners pick-up which jobs
  tags:
    - docker
    - privileged
  # Start the Docker in Docker container.
  # The concept of services is similar as in a docker-compose file. It allows to create additional container that this
  # build job needs. (In our case a container in which the docker command can be executed.)
  services:
    - docker:dind
  variables:
    # Set the Docker host to be the one of the previously created service (This forwards the user of the docker command
    # to this service instead of running it inside the container of this build job.)
    DOCKER_HOST: tcp://docker:2375
    # By GitLab recommended storage driver when using Docker-in-Docker (see https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-the-overlayfs-driver)
    DOCKER_DRIVER: overlay2
    # Disable the need for certificates when this build job communicates with the Docker service
    # If you want to secure the communication between the container of this build job and the Docker service you have to
    # slightly change the configuration of the GitLab runner. (see https://about.gitlab.com/blog/2019/07/31/docker-in-docker-with-docker-19-dot-03/)
    # Since in my case everything is running on the same server I can live with this communication not being encrypted.
    DOCKER_TLS_CERTDIR: ""
    # Override the value inside the "config.env" file so the test connects to the database running inside the
    # Docker-in-Docker service
    DATABASE_HOST: docker
  script:
    # Install the tool used to create a GitLab compatible report of the executed tests
    - go get -u github.com/jstemmer/go-junit-report
    # Create the folder in which the test report will be stored
    - mkdir -p build/output
    # Run the tests and save the report in the previously created folder
    - go test ./... -v 2>&1 | go-junit-report > build/output/test-result.xml && go test ./...
  artifacts:
    reports:
      # Set the path under which GitLab can find the test report
      junit: $CI_PROJECT_DIR/build/output/**.xml
